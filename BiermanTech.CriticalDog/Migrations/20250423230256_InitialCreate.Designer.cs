// <auto-generated />
using System;
using BiermanTech.CriticalDog.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BiermanTech.CriticalDog.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250423230256_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.MetaTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique();

                    b.ToTable("MetaTag", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.MetricType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UnitId" }, "FK_MetricType_Unit");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name1");

                    b.ToTable("MetricType", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.ObservationDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("IsSingular")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal?>("MaximumValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("MinimumValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ObservationTypeId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ObservationTypeId" }, "FK_ObservationDefinition_ObservationType");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name2");

                    b.ToTable("ObservationDefinition", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.ObservationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name3");

                    b.ToTable("ObservationType", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.ScientificDiscipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name4");

                    b.ToTable("ScientificDiscipline", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ArrivalDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Permissions")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Sex")
                        .HasColumnType("tinyint(4)");

                    b.Property<int?>("SubjectTypeId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SubjectTypeId" }, "FK_Subject_SubjectType");

                    b.HasIndex(new[] { "Name" }, "IDX_Subject_Name");

                    b.HasIndex(new[] { "Name", "ArrivalDate" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name5");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.SubjectRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<int?>("MetricTypeId")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("MetricValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("ObservationDefinitionId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("RecordTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MetricTypeId" }, "IDX_SubjectRecord_MetricTypeId");

                    b.HasIndex(new[] { "ObservationDefinitionId" }, "IDX_SubjectRecord_ObservationDefinitionId");

                    b.HasIndex(new[] { "RecordTime" }, "IDX_SubjectRecord_RecordTime");

                    b.HasIndex(new[] { "SubjectId" }, "IDX_SubjectRecord_SubjectId");

                    b.ToTable("SubjectRecord", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.SubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name", "ScientificName", "Clade" }, "IX_SubjectType_Name_ScientificName_Clade")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name6");

                    b.ToTable("SubjectType", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UnitSymbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name7");

                    b.HasIndex(new[] { "UnitSymbol" }, "UnitSymbol")
                        .IsUnique();

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("ObservationDefinitionDiscipline", b =>
                {
                    b.Property<int>("ObservationDefinitionId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ScientificDisciplineId")
                        .HasColumnType("int(11)");

                    b.HasKey("ObservationDefinitionId", "ScientificDisciplineId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ScientificDisciplineId" }, "FK_ObservationDefinitionDiscipline_ScientificDiscipline");

                    b.ToTable("ObservationDefinitionDiscipline", (string)null);
                });

            modelBuilder.Entity("ObservationDefinitionMetricType", b =>
                {
                    b.Property<int>("ObservationDefinitionId")
                        .HasColumnType("int(11)");

                    b.Property<int>("MetricTypeId")
                        .HasColumnType("int(11)");

                    b.HasKey("ObservationDefinitionId", "MetricTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "MetricTypeId" }, "FK_ObservationDefinitionMetricType_MetricType");

                    b.ToTable("ObservationDefinitionMetricType", (string)null);
                });

            modelBuilder.Entity("ObservationDefinitionUnit", b =>
                {
                    b.Property<int>("ObservationDefinitionId")
                        .HasColumnType("int(11)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int(11)");

                    b.HasKey("ObservationDefinitionId", "UnitId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UnitId" }, "FK_ObservationDefinitionUnit_Unit");

                    b.ToTable("ObservationDefinitionUnit", (string)null);
                });

            modelBuilder.Entity("SubjectMetaTag", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int(11)");

                    b.Property<int>("MetaTagId")
                        .HasColumnType("int(11)");

                    b.HasKey("SubjectId", "MetaTagId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "MetaTagId" }, "FK_SubjectMetaTag_MetaTag");

                    b.ToTable("SubjectMetaTag", (string)null);
                });

            modelBuilder.Entity("SubjectRecordMetaTag", b =>
                {
                    b.Property<int>("SubjectRecordId")
                        .HasColumnType("int(11)");

                    b.Property<int>("MetaTagId")
                        .HasColumnType("int(11)");

                    b.HasKey("SubjectRecordId", "MetaTagId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "MetaTagId" }, "FK_SubjectRecordMetaTag_MetaTag");

                    b.ToTable("SubjectRecordMetaTag", (string)null);
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.MetricType", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.Unit", "Unit")
                        .WithMany("MetricTypes")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("FK_MetricType_Unit");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.ObservationDefinition", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.ObservationType", "ObservationType")
                        .WithMany("ObservationDefinitions")
                        .HasForeignKey("ObservationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ObservationDefinition_ObservationType");

                    b.Navigation("ObservationType");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.Subject", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.SubjectType", "SubjectType")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectTypeId")
                        .HasConstraintName("FK_Subject_SubjectType");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subject_AspNetUsers_UserId");

                    b.Navigation("SubjectType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.SubjectRecord", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.MetricType", "MetricType")
                        .WithMany("SubjectRecords")
                        .HasForeignKey("MetricTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectRecord_MetricType");

                    b.HasOne("BiermanTech.CriticalDog.Data.ObservationDefinition", "ObservationDefinition")
                        .WithMany("SubjectRecords")
                        .HasForeignKey("ObservationDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubjectRecord_ObservationDefinition");

                    b.HasOne("BiermanTech.CriticalDog.Data.Subject", "Subject")
                        .WithMany("SubjectRecords")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubjectRecord_Subject");

                    b.Navigation("MetricType");

                    b.Navigation("ObservationDefinition");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ObservationDefinitionDiscipline", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.ObservationDefinition", null)
                        .WithMany()
                        .HasForeignKey("ObservationDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ObservationDefinitionDiscipline_ObservationDefinition");

                    b.HasOne("BiermanTech.CriticalDog.Data.ScientificDiscipline", null)
                        .WithMany()
                        .HasForeignKey("ScientificDisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ObservationDefinitionDiscipline_ScientificDiscipline");
                });

            modelBuilder.Entity("ObservationDefinitionMetricType", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.MetricType", null)
                        .WithMany()
                        .HasForeignKey("MetricTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ObservationDefinitionMetricType_MetricType");

                    b.HasOne("BiermanTech.CriticalDog.Data.ObservationDefinition", null)
                        .WithMany()
                        .HasForeignKey("ObservationDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ObservationDefinitionMetricType_ObservationDefinition");
                });

            modelBuilder.Entity("ObservationDefinitionUnit", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.ObservationDefinition", null)
                        .WithMany()
                        .HasForeignKey("ObservationDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ObservationDefinitionUnit_ObservationDefinition");

                    b.HasOne("BiermanTech.CriticalDog.Data.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ObservationDefinitionUnit_Unit");
                });

            modelBuilder.Entity("SubjectMetaTag", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.MetaTag", null)
                        .WithMany()
                        .HasForeignKey("MetaTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubjectMetaTag_MetaTag");

                    b.HasOne("BiermanTech.CriticalDog.Data.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubjectMetaTag_Subject");
                });

            modelBuilder.Entity("SubjectRecordMetaTag", b =>
                {
                    b.HasOne("BiermanTech.CriticalDog.Data.MetaTag", null)
                        .WithMany()
                        .HasForeignKey("MetaTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubjectRecordMetaTag_MetaTag");

                    b.HasOne("BiermanTech.CriticalDog.Data.SubjectRecord", null)
                        .WithMany()
                        .HasForeignKey("SubjectRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubjectRecordMetaTag_SubjectRecord");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.MetricType", b =>
                {
                    b.Navigation("SubjectRecords");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.ObservationDefinition", b =>
                {
                    b.Navigation("SubjectRecords");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.ObservationType", b =>
                {
                    b.Navigation("ObservationDefinitions");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.Subject", b =>
                {
                    b.Navigation("SubjectRecords");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.SubjectType", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("BiermanTech.CriticalDog.Data.Unit", b =>
                {
                    b.Navigation("MetricTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
