@page
@model BiermanTech.CriticalDog.Pages.Analytics.ObservationReportModel
@{
    ViewData["Title"] = $"{Model.Report.ObservationType} Report";
}

<h1>@Model.Report.ObservationType Report for @Model.Report.SubjectName</h1>

@if (Model.Report.Observations.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Value (@Model.Report.UnitName)</th>
                <th>Percent Change per Week (%/week)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obs in Model.Report.Observations)
            {
                <tr>
                    <td>@obs.RecordTime.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@obs.Value</td>
                    <td>
                        @if (obs.PercentChangePerWeek.HasValue)
                        {
                            if (obs.PercentChangePerWeek > 0)
                            {
                                <span class="text-success">+@(obs.PercentChangePerWeek.Value.ToString("F2"))</span>
                            }
                            else if (obs.PercentChangePerWeek < 0)
                            {
                                <span class="text-danger">@(obs.PercentChangePerWeek.Value.ToString("F2"))</span>
                            }
                            else
                            {
                                <span>0.00</span>
                            }
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <p><strong>Average Rate:</strong> @(Model.Report.AverageRatePerDay?.ToString("F3") ?? "N/A") @Model.Report.UnitName/day</p>
    <p><strong>Overall Trend:</strong> @Model.Report.TrendDescription</p>
}
else
{
    <p>@Model.Report.TrendDescription</p>
}

@if (!string.IsNullOrEmpty(ModelState[string.Empty]?.Errors.FirstOrDefault()?.ErrorMessage))
{
    <div class="alert alert-danger">
        @ModelState[string.Empty].Errors.First().ErrorMessage
    </div>
}

<a asp-page="/Index" class="btn btn-secondary">Back to Home</a>

<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script>