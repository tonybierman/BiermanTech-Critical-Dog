@using BiermanTech.CriticalDog.Reports.Columns
@inject IMetricValueTransformerFactory TransformFactory

@model BiermanTech.CriticalDog.ViewModels.SubjectRecordPartialViewModel

@{
    int mval = checked((int)Model.RecordVM?.MetricValue.Value);
    var transformer = TransformFactory.GetProvider(Model.RecordVM?.ObservationDefinition);
    string? transformed = transformer?.GetTransformedValue(mval);
}

<dt class="col-sm-3">
    @Html.DisplayFor(model => model.RecordVM.ObservationName)
</dt>
<dd class="col-sm-9">
    @if(string.IsNullOrEmpty(transformed))
    {
        @Html.DisplayFor(model => model.RecordVM.MetricValue) @Html.DisplayFor(model => model.RecordVM.UnitSymbol)
    }
    else
    {
        <span>@transformed</span>
    }
</dd>


